<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Summerrose’s Blog]]></title>
  <link href="https://github.com/alex1212112/alex1212112.github.com.git/atom.xml" rel="self"/>
  <link href="https://github.com/alex1212112/alex1212112.github.com.git/"/>
  <updated>2014-05-06T17:02:27+08:00</updated>
  <id>https://github.com/alex1212112/alex1212112.github.com.git/</id>
  <author>
    <name><![CDATA[ghren]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS7中UIViewController的转场]]></title>
    <link href="https://github.com/alex1212112/alex1212112.github.com.git/blog/2014/05/05/ios7zhong-uiviewcontrollerde-zhuan-chang/"/>
    <updated>2014-05-05T18:57:40+08:00</updated>
    <id>https://github.com/alex1212112/alex1212112.github.com.git/blog/2014/05/05/ios7zhong-uiviewcontrollerde-zhuan-chang</id>
    <content type="html"><![CDATA[<p>iOS7提供了一套供开发者方便自定义Viewcontroller间切换动画的API，我们可以利用这些API来自定义自己的转场效果，替代系统提供的默认push、present等动画效果。</p>

<h2>实现流程</h2>

<ul>
<li><p>首先介绍presentViewController转场动画的实现，主要流程如下：</p>

<ol>
<li><p> 自定义一个转场动画效果。</p></li>
<li><p> 在 presentingViewConttroller 里实现 UIViewControllerTransitioningDelegate 代理 方法，主要有两个，分别是present时候的动画和disMiss时候的动画，</p>

<p>  present时候要实现的方法：</p>

<pre><code>  - (id &lt;UIViewControllerAnimatedTransitioning&gt;)animationControllerForPresentedController:(UIViewController *)presented presentingController:(UIViewController *)presenting sourceController:(UIViewController *)source;
</code></pre>

<p>  disMiss时候要实现的方法：</p>

<pre><code>  - (id &lt;UIViewControllerAnimatedTransitioning&gt;)animationControllerForDismissedController:(UIViewController *)dismissed;
</code></pre>

<p>  这两个方法都返回刚才第一步自定义的转场动画。</p></li>
<li><p> 在present的时候设置presentedViewController 的 transitioningDelegate如下：</p>

<pre><code>  UIViewController *presentedVC = [[UIViewController alloc] init];
  presentedVC.transitioningDelegate = self;
  [self presentViewController:presentedVC animated:YES completion:nil];
</code></pre></li>
</ol>
</li>
<li><p>关于navigationController的push、pop的动画流程如下：</p>

<ol>
<li><p>  自定义一个转场动画效果。</p></li>
<li><p>  实现UINavigationControllerDelegate的代理方法，这里就一个</p></li>
</ol>
</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (id &lt;UIViewControllerAnimatedTransitioning&gt;)navigationController:(UINavigationController *)navigationController
</span><span class='line'>                                   animationControllerForOperation:(UINavigationControllerOperation)operation
</span><span class='line'>                                                fromViewController:(UIViewController *)fromVC
</span><span class='line'>                                                  toViewController:(UIViewController *)toVC ;                                                 </span></code></pre></td></tr></table></div></figure>


<p></p>

<ol>
<li><p>在初始化时候设置NavigationController的delgate如下:</p>

<pre><code>     self.navigationController.delegate = self;
</code></pre></li>
</ol>


<h3>自定义动画和相关API介绍</h3>

<p>上面流程里第一步转场动画效果该如何实现呢？</p>

<p>我们要自定义一个继承于NSObject的类，此类要实现UIViewControllerAnimatedTransitioning协议，并实现其代理方法，代理方法主要有两个，其中一个返回整个动画花费的时间，如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (NSTimeInterval)transitionDuration:(id &lt;UIViewControllerContextTransitioning&gt;)transitionContext</span></code></pre></td></tr></table></div></figure>


<p>假如我们动画时间为1秒，我们就可以在这样实现此方法</p>

<pre><code>    - (NSTimeInterval)transitionDuration:(id &lt;UIViewControllerContextTransitioning&gt;)transitionContext
    {
        return 1.0f;
    }
</code></pre>

<p>另一个就是具体动画实现的方法，如下：</p>

<pre><code>- (void)animateTransition:(id &lt;UIViewControllerContextTransitioning&gt;)transitionContext;
</code></pre>

<p>其中  transitionContext可以理解为动画切换的上下文，它是一个实现了 <code>UIViewControllerContextTransitioning</code>协议的NSObject，它提供了VC切换的一切必需内容，如从哪个VC到哪个VC，动画切换的容器等，这个NSObject里的几个比较重要的方法如下：</p>

<ul>
<li><p> <code>-(UIView *)containerView;</code></p>

<p>VC切换所发生的view容器，开发者应该将切出的view移除，将切入的view加入到该view容器中。</p></li>
<li><p> <code>-(UIViewController )viewControllerForKey:(NSString )key;</code></p>

<p>提供一个key，返回对应的VC。现在的SDK中key的选择只有UITransitionContextFromViewControllerKey和UITransitionContextToViewControllerKey两种，分别表示将要切出和切入的VC。</p></li>
<li><p> <code>-(CGRect)initialFrameForViewController:(UIViewController *)vc;</code></p>

<p>某个VC的初始位置，可以用来做动画的计算。</p></li>
<li><p> <code>-(CGRect)finalFrameForViewController:(UIViewController *)vc;</code></p>

<p>与上面的方法对应，得到切换结束时某个VC应在的frame。</p></li>
<li><p> <code>-(void)completeTransition:(BOOL)didComplete;</code></p>

<p>向这个context报告切换已经完成。</p></li>
</ul>


<p>下面是一个该方法的简单实现</p>

<pre><code>- (void)animateTransition:(id &lt;UIViewControllerContextTransitioning&gt;)transitionContext
{

// 1. Get controllers from transition context
UIViewController *toVC = [transitionContext viewControllerForKey:UITransitionContextToViewControllerKey];


// 2. Set init frame for toVC

CGRect screenBounds = [[UIScreen mainScreen] bounds];
CGRect finalFrame = [transitionContext finalFrameForViewController:toVC];

UIView *toViewSnapshot = [toVC.view resizableSnapshotViewFromRect:toVC.view.frame afterScreenUpdates:YES withCapInsets:UIEdgeInsetsZero];

toViewSnapshot.frame = CGRectOffset(finalFrame, 0, screenBounds.size.height);

UIView *toView = toVC.view;

// 3. Add toVC's view to containerView
UIView *containerView = [transitionContext containerView];
[containerView addSubview:toViewSnapshot];

// 4. Do animate now
NSTimeInterval duration = [self transitionDuration:transitionContext];
[UIView animateWithDuration:duration
                      delay:0.0
     usingSpringWithDamping:0.4
      initialSpringVelocity:10.0
                    options:UIViewAnimationOptionCurveEaseInOut
                 animations:^{
                     toViewSnapshot.frame = finalFrame;
                 } completion:^(BOOL finished) {

                     if ([transitionContext transitionWasCancelled]) {

                     } else {
                        //5. add the real toView and remove the snapshot
                         [containerView addSubview:toView];
                         for (UIView *view in containerView.subviews) {
    if (view != toView) {
        [view removeFromSuperview];
    }
}

                     }
                     //6. transition is finished
                     [transitionContext completeTransition:![transitionContext transitionWasCancelled]];
                 }];


}
</code></pre>

<p>解释：</p>

<blockquote><ol>
<li><p>   从上下文中获取toVC(根据需要，这里也可以获取到fromVC).</p></li>
<li><p>   获取toVC的view的快照和初始的frame.</p></li>
<li><p>   获取动画发生的的容器View——containerView,并将toView的快照加入到该容器View中.</p></li>
<li><p>   通过视图动画来执行自定义动画，此代码中的实现了一个iOS7中新增加的弹性动画效果，该动画使视图滑动时，像弹簧一样，稍微拉伸一些，再弹回正确位置.</p></li>
<li><p>   移除toView的快照，并将真正的toView加入到容器View中.</p></li>
<li><p>   向context报告动画切换已经完成.</p></li>
</ol>
</blockquote>

<h3>参考资料</h3>

<ol>
<li><p><a href="http://onevcat.com/2013/10/vc-transition-in-ios7/">WWDC 2013 Session笔记 &ndash; iOS7中的ViewController切换</a>;</p></li>
<li><p><a href="http://objccn.io/issue-5-3/">View Controller 转场</a>;</p></li>
<li><p><a href="http://www.cocoachina.com/gamedev/misc/2013/1224/7597.html">iOS7教程系列：自定义导航转场动画以及更多</a>;</p></li>
<li><p><a href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIViewControllerContextTransitioning_protocol/Reference/Reference.html">UIViewControllerContextTransitioning</a>;</p></li>
<li><p><a href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIViewControllerAnimatedTransitioning_Protocol/Reference/Reference.html">UIViewControllerAnimatedTransitioning</a>;</p></li>
<li><p><a href="https://developer.apple.com/library/ios/documentation/uikit/reference/UIViewControllerTransitioningDelegate_protocol/Reference/Reference.html">UIViewControllerTransitioningDelegate</a>;</p></li>
</ol>

]]></content>
  </entry>
  
</feed>
